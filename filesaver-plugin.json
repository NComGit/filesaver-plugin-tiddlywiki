[{"created":"20250816133352481","text":"/*\\\ntitle: $:/plugins/NiCo/filesaver/disable-default-save\ntype: application/javascript\nmodule-type: startup\n\nDisable TiddlyWiki's default save shortcuts when FSA is available\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nexports.name = \"disable-default-save\";\nexports.platforms = [\"browser\"];\nexports.after = [\"startup\"];\nexports.synchronous = true;\n\nexports.startup = function() {\n    if($tw.browser && 'showSaveFilePicker' in window) {\n        // Disable any existing keyboard shortcuts for saving\n        setTimeout(function() {\n            var rootWidget = $tw.rootWidget;\n            if (rootWidget && rootWidget.children) {\n                // Find and disable save shortcuts\n                $tw.utils.each(rootWidget.children, function(child) {\n                    if (child.shortcuts) {\n                        delete child.shortcuts[\"ctrl+s\"];\n                        delete child.shortcuts[\"meta+s\"];\n                    }\n                });\n            }\n        }, 100);\n    }\n};\n\n})();","tags":"","title":"$:/plugins/NiCo/filesaver/disable-default-save","modified":"20250816185629166","type":"application/javascript","module-type":"startup"},{"created":"20250816131423893","text":"/*\\\ntitle: $:/plugins/NiCo/filesaver/filesaver.js\ntype: application/javascript\nmodule-type: startup\n\nFile System Access API Saver for TiddlyWiki\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n// Export name and synchronous status\nexports.name = \"filesaver\";\nexports.platforms = [\"browser\"];\nexports.after = [\"startup\"];\nexports.synchronous = true;\n\nvar fileHandle = null;\nvar isProcessingSave = false;\n\n// Check if File System Access API is supported\nfunction isFileSystemAccessSupported() {\n    return typeof window !== 'undefined' && \n           'showSaveFilePicker' in window &&\n           'showOpenFilePicker' in window &&\n           'showDirectoryPicker' in window;\n}\n\n// Check if we're running from a local file\nfunction isLoadedFromFile() {\n    return window.location.protocol === 'file:';\n}\n\n// Get suggested filename from current URL or default\nfunction getSuggestedFilename() {\n    if (isLoadedFromFile()) {\n        const path = window.location.pathname;\n        const filename = path.split('/').pop();\n        if (filename && filename.endsWith('.html')) {\n            return filename;\n        }\n    }\n    return 'tiddlywiki.html';\n}\n\n// Show toast notification\nfunction showToast(message, isSuccess, duration = 3000) {\n    var toast = document.createElement('div');\n    toast.style.cssText = `\n        position: fixed;\n        bottom: 20px;\n        right: 20px;\n        padding: 12px 20px;\n        border-radius: 4px;\n        color: white;\n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", sans-serif;\n        font-size: 14px;\n        z-index: 10000;\n        opacity: 0;\n        transition: opacity 0.3s ease;\n        max-width: 350px;\n        word-wrap: break-word;\n        ${isSuccess ? 'background-color: #4CAF50;' : 'background-color: #f44336;'}\n    `;\n    toast.textContent = message;\n    \n    document.body.appendChild(toast);\n    \n    // Fade in\n    setTimeout(() => toast.style.opacity = '1', 10);\n    \n    // Remove after specified duration\n    setTimeout(() => {\n        toast.style.opacity = '0';\n        setTimeout(() => {\n            if (toast.parentNode) {\n                document.body.removeChild(toast);\n            }\n        }, 300);\n    }, duration);\n}\n\n// Get file handle - either by opening current file or saving new one\nasync function getFileHandle() {\n    if (isLoadedFromFile()) {\n        // We're running from a local file, ask user to select it for writing\n        console.log('Loaded from local file, asking user to select current file');\n        \n        const options = {\n            types: [{\n                description: 'TiddlyWiki files',\n                accept: {\n                    'text/html': ['.html']\n                }\n            }],\n            multiple: false\n        };\n        \n        const [handle] = await window.showOpenFilePicker(options);\n        console.log('User selected file:', handle.name);\n        \n        return handle;\n    } else {\n        // We're running from web, use save picker\n        console.log('Running from web, using save picker');\n        \n        const options = {\n            types: [{\n                description: 'TiddlyWiki files',\n                accept: {\n                    'text/html': ['.html']\n                }\n            }],\n            suggestedName: getSuggestedFilename()\n        };\n        \n        return await window.showSaveFilePicker(options);\n    }\n}\n\n// Select/change the target file\nasync function selectFile() {\n    try {\n        console.log('Opening file selection dialog');\n        const newHandle = await getFileHandle();\n        fileHandle = newHandle;\n        \n        // Update button text\n        updateButtonText();\n        \n        showToast(`File selected: ${fileHandle.name}`, true);\n        console.log('File handle updated:', fileHandle.name);\n        \n    } catch (error) {\n        if (error.name === 'AbortError') {\n            console.log('File selection cancelled by user');\n        } else {\n            console.error('File selection failed:', error);\n            showToast('File selection failed: ' + error.message, false);\n        }\n    }\n}\n\n// Save using TiddlyWiki's mechanism but with our file handle\nasync function saveFileWithFSA() {\n    if (isProcessingSave) {\n        console.log('Save already in progress, ignoring duplicate request');\n        return;\n    }\n    \n    // If no file is selected, select one first\n    if (!fileHandle) {\n        showToast('No file selected. Please choose a file first.', false);\n        await selectFile();\n        if (!fileHandle) {\n            return; // User cancelled file selection\n        }\n    }\n    \n    isProcessingSave = true;\n    console.log('Starting File System Access API save through TiddlyWiki mechanism');\n    \n    try {\n        // Create a custom saver that uses our file handle\n        const customSaver = {\n            info: {\n                name: \"file-system-access\",\n                priority: 5000,\n                capabilities: [\"save\", \"autosave\"]\n            },\n            \n            save: async function(text, method, callback) {\n                try {\n                    console.log('Custom saver called, writing to file handle:', fileHandle.name);\n                    \n                    // Write using our file handle\n                    const writable = await fileHandle.createWritable();\n                    await writable.write(text);\n                    await writable.close();\n                    \n                    console.log('File written successfully');\n                    \n                    // Call callback with success\n                    if (callback) {\n                        callback(null);\n                    }\n                    \n                    showToast(`File saved: ${fileHandle.name}`, true);\n                    return true;\n                    \n                } catch (error) {\n                    console.error('Custom saver failed:', error);\n                    if (callback) {\n                        callback(error);\n                    }\n                    \n                    if (error.name === 'NotAllowedError') {\n                        showToast('File access denied. Please select the file again.', false);\n                        fileHandle = null;\n                        updateButtonText();\n                    } else {\n                        showToast('Save failed: ' + error.message, false);\n                    }\n                    return false;\n                }\n            }\n        };\n        \n        // Temporarily replace the browser saver\n        let originalSavers = [];\n        if ($tw.saverHandler && $tw.saverHandler.savers) {\n            originalSavers = [...$tw.saverHandler.savers];\n            $tw.saverHandler.savers = [customSaver];\n        }\n        \n        // Trigger TiddlyWiki's built-in save\n        console.log('Triggering TiddlyWiki save...');\n        if ($tw.rootWidget) {\n            $tw.rootWidget.dispatchEvent({\n                type: \"tm-save-wiki\",\n                param: \"\",\n                paramObject: {}\n            });\n        }\n        \n        // Restore original savers after a delay\n        setTimeout(() => {\n            if ($tw.saverHandler && originalSavers.length > 0) {\n                $tw.saverHandler.savers = originalSavers;\n                console.log('Original savers restored');\n            }\n        }, 1000);\n        \n    } catch (error) {\n        console.error('Save failed:', error);\n        showToast('Save failed: ' + error.message, false);\n    } finally {\n        isProcessingSave = false;\n        console.log('Save process completed');\n    }\n}\n\n// Handle Ctrl+S keyboard shortcut\nfunction handleKeyDown(event) {\n    // Check for Ctrl+S (or Cmd+S on Mac)\n    if ((event.ctrlKey || event.metaKey) && event.key === 's') {\n        console.log('Ctrl+S detected');\n        \n        if (isFileSystemAccessSupported()) {\n            console.log('FSA supported, preventing default and using custom save');\n            \n            // Prevent default behavior\n            event.preventDefault();\n            event.stopPropagation();\n            event.stopImmediatePropagation();\n            \n            // Call our save function\n            saveFileWithFSA();\n            \n            return false;\n        } else {\n            console.log('FSA not supported');\n            showToast('File System Access API not supported', false);\n        }\n    }\n}\n\n// Update button text based on current state\nfunction updateButtonText() {\n    const button = document.getElementById('fsa-file-selector');\n    if (button) {\n        if (fileHandle) {\n            // Show truncated filename if too long\n            let displayName = fileHandle.name;\n            if (displayName.length > 15) {\n                displayName = displayName.substring(0, 12) + '...';\n            }\n            button.innerHTML = `📁 ${displayName}`;\n            button.title = `Currently saving to: ${fileHandle.name}\\nClick to change file`;\n        } else {\n            button.innerHTML = '📁 Select File';\n            button.title = 'Click to select a file for Ctrl+S saving';\n        }\n    }\n}\n\n// Add file selector button with better TiddlyWiki integration\nfunction addFileSelectorButton() {\n    if (!document.getElementById('fsa-file-selector')) {\n        const button = document.createElement('button');\n        button.id = 'fsa-file-selector';\n        button.innerHTML = '📁 Select File';\n        button.title = 'Click to select a file for Ctrl+S saving';\n        \n        // Style to match TiddlyWiki's aesthetic\n        button.style.cssText = `\n            position: fixed;\n            bottom: 15px;\n            left: 15px;\n            z-index: 900;\n            padding: 8px 12px;\n            background: #5778d8;\n            color: white;\n            border: 1px solid #4567cd;\n            border-radius: 3px;\n            cursor: pointer;\n            font-size: 11px;\n            font-family: \"Helvetica Neue\", Helvetica, Arial, \"Lucida Grande\", sans-serif;\n            box-shadow: 0 1px 4px rgba(0,0,0,0.3);\n            transition: all 0.2s ease;\n            min-width: 100px;\n            text-align: left;\n        `;\n        \n        // Hover effects\n        button.addEventListener('mouseenter', () => {\n            button.style.background = '#4567cd';\n            button.style.transform = 'translateY(-1px)';\n            button.style.boxShadow = '0 2px 6px rgba(0,0,0,0.4)';\n        });\n        \n        button.addEventListener('mouseleave', () => {\n            button.style.background = '#5778d8';\n            button.style.transform = 'translateY(0)';\n            button.style.boxShadow = '0 1px 4px rgba(0,0,0,0.3)';\n        });\n        \n        // Click handler - always opens file selection\n        button.addEventListener('click', selectFile);\n        \n        document.body.appendChild(button);\n        \n        // Set initial text\n        updateButtonText();\n    }\n}\n\n// Check if we need to avoid sidebar collision\nfunction adjustButtonPosition() {\n    const button = document.getElementById('fsa-file-selector');\n    if (!button) return;\n    \n    // Check if sidebar is open (TiddlyWiki specific)\n    const sidebar = document.querySelector('.tc-sidebar-scrollable');\n    if (sidebar && getComputedStyle(sidebar).display !== 'none') {\n        // Sidebar is visible, move button up a bit\n        button.style.bottom = '60px';\n    } else {\n        button.style.bottom = '15px';\n    }\n}\n\nexports.startup = function() {\n    // Only run in browser\n    if($tw.browser) {\n        console.log('File System Access API Saver starting up');\n        console.log('FSA supported:', isFileSystemAccessSupported());\n        console.log('Loaded from file:', isLoadedFromFile());\n        console.log('Suggested filename:', getSuggestedFilename());\n        \n        if (!isFileSystemAccessSupported()) {\n            console.log('File System Access API not supported, plugin will not initialize');\n            return;\n        }\n        \n        // Single event listener with capture phase\n        document.addEventListener('keydown', handleKeyDown, true);\n        \n        // Add file selector button after page loads\n        setTimeout(() => {\n            addFileSelectorButton();\n            adjustButtonPosition();\n        }, 1000);\n        \n        // Adjust button position on window resize\n        window.addEventListener('resize', adjustButtonPosition);\n        \n        console.log('Event listeners attached');\n        showToast('File Access API ready! Select a file to enable Ctrl+S saving.', true, 3000);\n    }\n};\n\n})();","tags":"","title":"$:/plugins/NiCo/filesaver/filesaver.js","modified":"20250816183018082","type":"application/javascript","module-type":"startup"},{"created":"20250816185816468","text":"Copyright 2025 NiCo\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n","tags":"","title":"$:/plugins/NiCo/filesaver/license","modified":"20250816185934537","type":"text/plain"},{"created":"20250816130639068","text":"{\n  \"title\": \"$:/plugins/NiCo/filesaver/plugin.info\",\n  \"description\": \"File System Access API Saver\",\n  \"author\": \"NiCo\",\n  \"version\": \"1.0.0\",\n  \"core-version\": \">=5.2.0\",\n  \"source\": \"local development\",\n  \"plugin-type\": \"plugin\",\n  \"dependents\": \"\",\n  \"list\": \"readme license\"\n}","tags":"","title":"$:/plugins/NiCo/filesaver/plugin.info","modified":"20250816131417909","type":"application/json"},{"created":"20250816185726170","text":"! File System Access API Saver\n\nThis plugin enables seamless Ctrl+S saving using the modern File System Access API.\n\n!! Features\n\n* Press Ctrl+S to save without dialogs\n* Works with local HTML files  \n* File selection UI for easy setup\n\n!! Usage\n\n# Click the \"📁 Select File\" button (bottom left)\n# Choose your TiddlyWiki HTML file\n# Press Ctrl+S anytime to save instantly!\n\n!! Requirements\n\n* Modern browser with File System Access API support (Chrome 86+, Edge 86+)\n* TiddlyWiki 5.1.22 or later","tags":"","title":"$:/plugins/NiCo/filesaver/readme","modified":"20250816185806551","type":"text/vnd.tiddlywiki"}]